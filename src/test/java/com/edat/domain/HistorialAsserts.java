package com.edat.domain;

import static com.edat.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class HistorialAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistorialAllPropertiesEquals(Historial expected, Historial actual) {
        assertHistorialAutoGeneratedPropertiesEquals(expected, actual);
        assertHistorialAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistorialAllUpdatablePropertiesEquals(Historial expected, Historial actual) {
        assertHistorialUpdatableFieldsEquals(expected, actual);
        assertHistorialUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistorialAutoGeneratedPropertiesEquals(Historial expected, Historial actual) {
        assertThat(expected)
            .as("Verify Historial auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistorialUpdatableFieldsEquals(Historial expected, Historial actual) {
        assertThat(expected)
            .as("Verify Historial relevant properties")
            .satisfies(
                e -> assertThat(e.getFecha()).as("check fecha").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getFecha())
            )
            .satisfies(e -> assertThat(e.getAutorizado_dni()).as("check autorizado_dni").isEqualTo(actual.getAutorizado_dni()))
            .satisfies(
                e ->
                    assertThat(e.getAutorizado_dniContentType())
                        .as("check autorizado_dni contenty type")
                        .isEqualTo(actual.getAutorizado_dniContentType())
            )
            .satisfies(e -> assertThat(e.getAutorizado_rostro()).as("check autorizado_rostro").isEqualTo(actual.getAutorizado_rostro()))
            .satisfies(
                e ->
                    assertThat(e.getAutorizado_rostroContentType())
                        .as("check autorizado_rostro contenty type")
                        .isEqualTo(actual.getAutorizado_rostroContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistorialUpdatableRelationshipsEquals(Historial expected, Historial actual) {
        assertThat(expected)
            .as("Verify Historial relationships")
            .satisfies(e -> assertThat(e.getAlumno()).as("check alumno").isEqualTo(actual.getAlumno()))
            .satisfies(e -> assertThat(e.getAutorizado()).as("check autorizado").isEqualTo(actual.getAutorizado()));
    }
}
